import asyncio
import datetime

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from telebot.async_telebot import AsyncTeleBot

from app.database import HabitsDB, HabitsTodayDB, UsersDB
from app.database import session_async
from bot.loader import bot

scheduler = AsyncIOScheduler()


async def get_users_id(session: AsyncSession) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ user_id –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    date = datetime.datetime.now().date()

    # 1) –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsDB –µ—Å—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —Å count_done < days_to_form
    ui_not_count_done = await session.execute(
        select(HabitsDB.user_id).where(
            HabitsDB.count_done < HabitsDB.days_to_form
        )
    )

    # 1.1) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsTodayDB –µ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –∏ —Å complete == None
    ui_not_complete = await session.execute(
        select(HabitsTodayDB.user_id).where(
            HabitsTodayDB.date == date,
            HabitsTodayDB.completed == None,
        )
    )

    # 1.2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsTodayDB –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    ui_not_date = await session.execute(
        select(HabitsDB.user_id, HabitsTodayDB)
        .join(
            HabitsTodayDB, HabitsDB.id == HabitsTodayDB.habit_id, isouter=True
        )
        .where(HabitsTodayDB.date == None)
    )

    # 2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ui_with_notifications_on = await session.execute(
        select(UsersDB.user_id).where(UsersDB.notifications == "+")
    )

    ui_not_count_done = list(ui_not_count_done.scalars().fetchall())
    ui_not_complete = list(ui_not_complete.scalars().fetchall())
    ui_not_date = list(ui_not_date.scalars().fetchall())
    ui_with_notifications_on = list(
        ui_with_notifications_on.scalars().fetchall()
    )

    users_needs_notifications = set(ui_not_count_done).intersection(
        set(ui_not_complete + ui_not_date)
    )
    users_needs_notifications = set(ui_with_notifications_on).intersection(
        users_needs_notifications
    )

    return list(users_needs_notifications)


async def myfunc(my_bot: AsyncTeleBot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    async with session_async() as session:
        users_id = await get_users_id(session)

        for user_id in users_id:
            await my_bot.send_message(
                chat_id=int(user_id),
                text="–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—èüçÄ",
            )


async def main():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12 –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏
    1) –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsDB –µ—Å—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω–∞ –ø—Ä–∏–≤—ã—á–∫–∞ —Å count_done < days_to_form
     1.1) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsTodayDB –µ—Å—Ç—å –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –∏ —Å complete == None
          –∏–ª–∏
     1.2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ HabitsTodayDB –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
    2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    scheduler.add_job(
        myfunc, "cron", hour=12, id="my_job_id", kwargs={"my_bot": bot}
    )
    scheduler.start()
    while True:
        await asyncio.sleep(1000)


if __name__ == "__main__":
    asyncio.run(main())
